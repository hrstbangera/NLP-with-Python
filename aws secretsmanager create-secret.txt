aws secretsmanager create-secret --name MyConfigSecret \
    --secret-string '{"CLIENT_ID":"your_client_id","CLIENT_SECRET":"your_client_secret","CLIENT_HOST":"your_client_host"}'


import boto3
import json

def get_secret(secret_name, region_name="us-east-1"):
    """
    Retrieve secret from AWS Secrets Manager.
    """
    client = boto3.client('secretsmanager', region_name=region_name)

    try:
        response = client.get_secret_value(SecretId=secret_name)
        
        # SecretString is returned as JSON
        if "SecretString" in response:
            secret = json.loads(response["SecretString"])
            return secret
        else:
            raise ValueError("SecretBinary not supported")
    
    except Exception as e:
        print(f"Error retrieving secret: {str(e)}")
        return None

# Retrieve secrets
secrets = get_secret("MyConfigSecret")

if secrets:
    CLIENT_ID = secrets["CLIENT_ID"]
    CLIENT_SECRET = secrets["CLIENT_SECRET"]
    CLIENT_HOST = secrets["CLIENT_HOST"]

    print("Secrets retrieved successfully!")
    print(f"Client ID: {CLIENT_ID}")
    # Do NOT print sensitive values like CLIENT_SECRET in production
------------------------------

import boto3
import json

def store_secret(secret_name, secret_value, region="us-east-1"):
    client = boto3.client('secretsmanager', region_name=region)
    
    response = client.create_secret(
        Name=secret_name,
        SecretString=json.dumps(secret_value)
    )
    
    return response

# Store secrets
secret_data = {
    "CLIENT_ID": "your_client_id",
    "CLIENT_SECRET": "your_client_secret",
    "CLIENT_HOST": "your_client_host"
}

response = store_secret("MyConfigSecret", secret_data)
print("Secret stored:", response)
----------
cloud formation
Resources:
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyConfigSecret
      SecretString: '{"CLIENT_ID":"your_client_id","CLIENT_SECRET":"your_client_secret","CLIENT_HOST":"your_client_host"}'

aws cloudformation create-stack --stack-name MySecretStack --template-body file://secrets.yaml
---------
terraform
resource "aws_secretsmanager_secret" "config_secret" {
  name = "MyConfigSecret"
}

resource "aws_secretsmanager_secret_version" "config_secret_value" {
  secret_id     = aws_secretsmanager_secret.config_secret.id
  secret_string = jsonencode({
    "CLIENT_ID"     = "your_client_id"
    "CLIENT_SECRET" = "your_client_secret"
    "CLIENT_HOST"   = "your_client_host"
  })
}

terraform apply
------------

