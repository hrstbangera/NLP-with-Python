import streamlit as st

# Example chatbot response (You would replace this with your chatbot's actual response)
latest_response = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {latest_response}")

# Add a button to copy the response to the clipboard
copy_button = st.button("Copy to clipboard")

# JavaScript code to copy the latest response to clipboard
if copy_button:
    st.write("""
        <script>
        const response = `"{}"`;
        navigator.clipboard.writeText(response).then(() => {
            alert('Copied to clipboard!');
        }).catch(err => {
            alert('Failed to copy text: ' + err);
        });
        </script>
    """.format(latest_response), unsafe_allow_html=True)
-----------------


import streamlit as st

# Example chatbot response (replace with your chatbot's actual response)
latest_response = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {latest_response}")

# Add a button to copy the response to the clipboard
copy_button = st.button("Copy to clipboard", key="copy_button")

# JavaScript code to copy the latest response to clipboard
if copy_button:
    st.markdown(f"""
        <script>
        const response = `{latest_response}`;
        navigator.clipboard.writeText(response).then(() => {{
            alert('Copied to clipboard!');
        }}).catch(err => {{
            console.error('Failed to copy text: ', err);
        }});
        </script>
    """, unsafe_allow_html=True)
--------------------

import streamlit as st

# Example chatbot response stored in session state (replace with your actual chatbot response logic)
if 'answer' not in st.session_state:
    st.session_state['answer'] = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {st.session_state['answer']}")

# Add a button to copy the response to the clipboard
copy_button = st.button("Copy to clipboard", key="copy_button")

# Inject JavaScript for clipboard copying without triggering a re-run
if copy_button:
    # This JavaScript will run without affecting Streamlit's execution
    st.markdown(f"""
        <script>
        const response = `{st.session_state['answer']}`;
        navigator.clipboard.writeText(response).then(() => {{
            alert('Copied to clipboard!');
        }}).catch(err => {{
            console.error('Failed to copy text: ', err);
        }});
        </script>
    """, unsafe_allow_html=True)
---------------
import streamlit as st

# Example chatbot response stored in session state (replace with your actual chatbot response logic)
if 'answer' not in st.session_state:
    st.session_state['answer'] = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {st.session_state['answer']}")

# Create a hidden text input field to hold the text you want to copy
st.text_input("Hidden text field", st.session_state['answer'], key="copy_text", type="default")

# Add a button to trigger the clipboard copy
copy_button = st.button("Copy to clipboard", key="copy_button")

# Inject JavaScript to copy text from the hidden text field to clipboard
if copy_button:
    st.markdown(f"""
        <script>
        var copyText = document.getElementById('copy_text');
        navigator.clipboard.writeText(copyText.value).then(() => {{
            alert('Copied to clipboard!');
        }}).catch(err => {{
            console.error('Failed to copy text: ', err);
        }});
        </script>
    """, unsafe_allow_html=True)

-------------------------------------
import streamlit as st
import streamlit.components.v1 as components

# Example chatbot response stored in session state (replace with your actual chatbot response logic)
if 'answer' not in st.session_state:
    st.session_state['answer'] = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {st.session_state['answer']}")

# Button to trigger the copy action
if st.button("Copy to clipboard"):
    # Inject custom HTML and JavaScript directly using Streamlit's components.html
    components.html(f"""
        <script>
        function copyToClipboard(text) {{
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            alert('Copied to clipboard!');
        }}
        copyToClipboard(`{st.session_state['answer']}`);
        </script>
    """, height=0)


Hello there! 

Hello there! How can I assist you today?
---------------------------------
import streamlit as st

# Example chatbot response stored in session state (replace with your actual chatbot response logic)
if 'answer' not in st.session_state:
    st.session_state['answer'] = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {st.session_state['answer']}")

# Use st.markdown to inject HTML and JavaScript for clipboard functionality
st.markdown(f"""
    <script>
    function copyToClipboard() {{
        const textToCopy = `{st.session_state['answer']}`;
        const textarea = document.createElement('textarea');
        textarea.value = textToCopy;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
        alert('Copied to clipboard!');
    }}
    </script>
    <button onclick="copyToClipboard()">Copy to clipboard</button>
""", unsafe_allow_html=True)
---------------

import streamlit as st

# Example chatbot response stored in session state (replace with your actual chatbot response logic)
if 'answer' not in st.session_state:
    st.session_state['answer'] = "This is the latest response from the bot."

# Display the latest response
st.write(f"Bot: {st.session_state['answer']}")

# Inject the JavaScript code and create a button to copy to clipboard
st.markdown(f"""
    <script>
    function copyToClipboard() {{
        var textToCopy = `{st.session_state['answer']}`;
        var tempTextArea = document.createElement("textarea");
        tempTextArea.value = textToCopy;
        document.body.appendChild(tempTextArea);
        tempTextArea.select();
        document.execCommand("copy");
        document.body.removeChild(tempTextArea);
        alert("Copied to clipboard!");
    }}
    </script>
    <button onclick="copyToClipboard()">Copy to clipboard</button>
""", unsafe_allow_html=True)

-------------------------------
import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
# st.code(text_to_copy, language="text")

# Button to copy to clipboard using HTML and JS
copy_button_html = f"""
    <button onclick="navigator.clipboard.writeText('{text_to_copy}')">
        Copy to clipboard
    </button>
"""

# Display the HTML in Streamlit
st.components.v1.html(copy_button_html)
---------------------
import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
st.code(text_to_copy, language="text")

# Button to copy to clipboard using HTML and JS with proper error handling
copy_button_html = f"""
    <script>
        function copyToClipboard() {{
            if (navigator.clipboard) {{
                navigator.clipboard.writeText("{text_to_copy}").then(function() {{
                    alert('Text copied to clipboard!');
                }}, function(err) {{
                    console.error('Could not copy text: ', err);
                }});
            }} else {{
                alert('Clipboard API not supported!');
            }}
        }}
    </script>
    <button onclick="copyToClipboard()">Copy to clipboard</button>
"""

# Display the HTML in Streamlit
st.components.v1.html(copy_button_html)
---------------------------------

import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
st.code(text_to_copy, language="text")

# Using input field and fallback JavaScript
copy_button_html = f"""
    <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
    <button onclick="copyFallback()">Copy to clipboard</button>

    <script>
        function copyFallback() {{
            var copyText = document.getElementById("textToCopy");
            copyText.select();
            document.execCommand("copy");
            alert("Text copied to clipboard!");
        }}
    </script>
"""

# Display the HTML in Streamlit
st.components.v1.html(copy_button_html)
----------------
import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
st.code(text_to_copy, language="text")

# Streamlit Button
if st.button('Copy to clipboard'):
    # Use st.components to embed the HTML + JS to copy the text to clipboard
    copy_script = f"""
    <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
    <script>
        function copyFallback() {{
            var copyText = document.getElementById("textToCopy");
            copyText.select();
            document.execCommand("copy");
            alert("Text copied to clipboard!");
        }}
        copyFallback();
    </script>
    """
    
    # Display the hidden input field and run the JavaScript when the button is clicked
    st.components.v1.html(copy_script)
----------------
import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
st.code(text_to_copy, language="text")

# HTML button that looks like Streamlit's button and uses JavaScript for copying to clipboard
copy_button_html = f"""
    <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
    <button style="
        background-color: #f63366;
        color: white;
        padding: 0.25em 0.5em;
        border-radius: 0.25em;
        border: none;
        cursor: pointer;
        font-size: 1.1em;
        font-weight: bold;
    " onclick="copyFallback()">Copy to clipboard</button>

    <script>
        function copyFallback() {{
            var copyText = document.getElementById("textToCopy");
            copyText.select();
            document.execCommand("copy");
            alert("Text copied to clipboard!");
        }}
    </script>
"""

# Display the HTML button in Streamlit
st.components.v1.html(copy_button_html)

---------------------
import streamlit as st

# Content to copy
text_to_copy = "im pooki"

# Display the content
st.write("Text to copy:")
st.code(text_to_copy, language="text")

# HTML button that looks like an icon (📋) and doesn't cause layout issues
copy_button_html = f"""
    <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
    <button style="
        background-color: transparent;
        border: none;
        cursor: pointer;
        font-size: 1.5em;
    " title="Copy to clipboard" onclick="copyFallback()">📋</button>

    <script>
        function copyFallback() {{
            var copyText = document.getElementById("textToCopy");
            copyText.select();
            document.execCommand("copy");
            alert("Text copied to clipboard!");
        }}
    </script>
    <style>
        /* Remove excess margin or padding added by Streamlit */
        button {{
            margin: 0;
            padding: 0;
        }}
    </style>
"""

# Display the HTML button in Streamlit
st.components.v1.html(copy_button_html, height=50)

# Other Streamlit buttons (for other functionalities)
if st.button("Another Functionality Button"):
    st.write("Another functionality triggered!")

--------------
import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        if st.button("+1 👍", key="thumbs_up"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        if st.button("-1 👎", key="thumbs_down"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        # HTML for the copy to clipboard button
        copy_button_html = f"""
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <button style="
                background-color: transparent;
                border: none;
                cursor: pointer;
                font-size: 1.5em;
                vertical-align: middle;  /* Aligns button with other elements */
                line-height: 1.5em;       /* Ensures button height matches */
            " title="Copy to clipboard" onclick="copyFallback()">📋</button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand("copy");
                    alert("Text copied to clipboard!");
                }}
            </script>
            <style>
                button {{
                    margin: 0;
                    padding: 0;
                    vertical-align: middle;  /* Aligns the button inline */
                }}
            </style>
        """
        # Display the copy to clipboard button
        st.components.v1.html(copy_button_html, height=50)

# You can use col4 for other functionality or leave it empty for now.
with col4:
    st.write("Other functionality here.")

-------------------------------
import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        if st.button("+1 👍", key="thumbs_up", help="Give a thumbs up!"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        if st.button("-1 👎", key="thumbs_down", help="Give a thumbs down!"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        # HTML for the copy to clipboard button with rounded style
        copy_button_html = f"""
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <button style="
                background-color: #f0f0f0;  /* Light background color */
                border: 2px solid #ccc;      /* Border color */
                border-radius: 25px;         /* Rounded edges */
                cursor: pointer;
                font-size: 1.5em;
                padding: 10px 15px;          /* Padding for better click area */
                vertical-align: middle;       /* Aligns button with other elements */
                line-height: 1.5em;           /* Ensures button height matches */
            " title="Copy to clipboard" onclick="copyFallback()">📋</button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand("copy");
                    alert("Text copied to clipboard!");
                }}
            </script>
            <style>
                button {{
                    margin: 0;
                    padding: 0;
                    vertical-align: middle;  /* Aligns the button inline */
                }}
            </style>
        """
        # Display the copy to clipboard button
        st.components.v1.html(copy_button_html, height=50)

# You can use col4 for other functionality or leave it empty for now.
with col4:
    st.write("Other functionality here.")
-----------------------------------------------


import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        # Button with rounded edges
        if st.button("+1 👍", key="thumbs_up"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        # Button with rounded edges
        if st.button("-1 👎", key="thumbs_down"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        # HTML for the copy to clipboard button using Font Awesome icon
        copy_button_html = f"""
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <button style="
                background-color: #f0f0f0;  /* Light background color */
                border: 2px solid #ccc;      /* Border color */
                border-radius: 5px;          /* Slightly rounded edges */
                cursor: pointer;
                font-size: 1.5em;
                padding: 10px 20px;          /* Increased padding for a rectangular shape */
                vertical-align: middle;       /* Aligns button with other elements */
                display: flex;                /* Flexbox for centering */
                align-items: center;          /* Center vertically */
                justify-content: center;      /* Center horizontally */
            " title="Copy to clipboard" onclick="copyFallback()">
                <i class="fa-regular fa-clipboard"></i>
            </button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand("copy");
                    alert("Text copied to clipboard!");
                }}
            </script>
        """
        # Display the copy to clipboard button
        st.components.v1.html(copy_button_html, height=50)

# You can use col4 for other functionality or leave it empty for now.
with col4:
    st.write("Other functionality here.")


----
import streamlit as st
import pyperclip

# Initialize session state for the button
if 'button_clicked' not in st.session_state:
    st.session_state['button_clicked'] = False

def copy_to_clipboard(text):
    # Copy the text to the clipboard
    pyperclip.copy(text)
    st.session_state['button_clicked'] = True
    st.write("Text copied to clipboard!")

# Text to copy
text_to_copy = "This is the text to copy."

# Button to trigger the action
if st.button("Copy Text"):
    copy_to_clipboard(text_to_copy)

# Check if the button has been clicked
if st.session_state['button_clicked']:
    st.write("Action has been performed!")
------------------------
import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        # Button with rounded edges
        if st.button("+1 👍", key="thumbs_up"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        # Button with rounded edges
        if st.button("-1 👎", key="thumbs_down"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        # Streamlit button for copying to clipboard
        if st.button("📋 Copy to clipboard"):
            # Inject the fallback JavaScript code for clipboard copying
            copy_button_html = f"""
                <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
                <script>
                    function copyFallback() {{
                        var copyText = document.getElementById("textToCopy");
                        copyText.select();
                        document.execCommand("copy");
                        alert("Text copied to clipboard!");
                    }}
                    copyFallback();
                </script>
            """
            # Inject the script to handle copying to clipboard
            st.markdown(copy_button_html, unsafe_allow_html=True)

# You can use col4 for other functionality or leave it empty for now.
with col4:
    st.write("Other functionality here.")
------------------
import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        if st.button("+1 👍", key="thumbs_up"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        if st.button("-1 👎", key="thumbs_down"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        if st.button("📋 Copy to clipboard"):
            # Inject JavaScript to handle clipboard copy using the `execCommand('copy')` method
            copy_button_html = f"""
                <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
                <script>
                    function copyFallback() {{
                        var copyText = document.getElementById("textToCopy");
                        copyText.style.display = 'block';  // Make the input visible
                        copyText.select();  // Select the content
                        document.execCommand('copy');  // Copy the selected text
                        copyText.style.display = 'none';  // Hide the input after copying
                        alert("Text copied to clipboard: " + copyText.value);
                    }}
                    copyFallback();  // Trigger the copy function immediately when button is clicked
                </script>
            """
            # Inject the HTML and JavaScript into the app
            st.markdown(copy_button_html, unsafe_allow_html=True)

# Use col4 for other functionality or leave it empty
with col4:
    st.write("Other functionality here.")

----------
import streamlit as st

# Define a button with custom HTML and CSS
button_html = """
    <style>
    .custom-button {
        display: inline-block;
        background-color: #4CAF50; /* Green */
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        border-radius: 12px;
        border: 2px solid #4CAF50;
        transition-duration: 0.4s;
        cursor: pointer;
    }
    .custom-button:hover {
        background-color: white; 
        color: black;
        border: 2px solid #4CAF50;
    }
    </style>
    <a href="#" class="custom-button">Click Me</a>
"""

# Display the custom button using st.markdown
st.markdown(button_html, unsafe_allow_html=True)

# Check for button click event
if st.button("Trigger Action"):
    st.write("Button was clicked!")

---------------------------------------
import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Create four columns with the specified layout ratios
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

with col1:
    if user_input:  # Only show the thumbs-up button if there's user input
        if st.button("+1 👍", key="thumbs_up"):
            st.write("You clicked thumbs up!")

with col2:
    if user_input:  # Only show the thumbs-down button if there's user input
        if st.button("-1 👎", key="thumbs_down"):
            st.write("You clicked thumbs down!")

with col3:
    if user_input:  # Only show the copy to clipboard button if there's user input
        # Display the copy to clipboard button using HTML with JavaScript
        copy_button_html = f"""
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <style>
                .copy-btn {{
                    padding: 5px 10px;
                    border-radius: 5px;
                    background-color: white;
                    border: 1px solid #ccc;
                    line-height: 1;
                    vertical-align: middle;
                    transition: all 0.3s ease;
                }}
                .copy-btn:hover {{
                    border-color: #007bff;
                    box-shadow: 0px 0px 5px rgba(0, 123, 255, 0.5);
                    background-color: #f0f8ff;
                }}
            </style>
            <button class="copy-btn" onclick="copyFallback()">
                <p style="margin: 0; display: inline-block; vertical-align: middle;">📋 Copy to clipboard</p>
            </button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand('copy');
                    alert('Text copied to clipboard!');
                }}
            </script>
        """
        # Render the HTML in Streamlit using components
        st.components.v1.html(copy_button_html, height=50)

with col4:
    st.write("Other functionality here.")
-----------------------------------------

import streamlit as st

# Simulate user input (you can replace this with actual user input logic)
user_input = st.text_input("Enter something to enable buttons:")

# Set session state for disabled buttons (for simulation)
if 'disabledButtons' not in st.session_state:
    st.session_state['disabledButtons'] = False

# Define callbacks (as an example, these can be your actual logic)
def feedback_like_callback():
    st.session_state['disabledButtons'] = True
    st.write("You clicked thumbs up!")

def feedback_dislike_callback():
    st.session_state['disabledButtons'] = True
    st.write("You clicked thumbs down!")

# Content to copy
text_to_copy = "im pooki"

# Define button styles for thumbs up, thumbs down, and copy button
button_style = """
    display: inline-block;
    padding: 10px 20px;
    margin: 0 10px;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1em;
    text-align: center;
    vertical-align: middle;
    height: 38px;
    line-height: 38px;
    box-sizing: border-box;
"""
button_hover_style = """
    .custom-btn:hover {
        border-color: black;
    }
"""

# Create columns for layout
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

# Custom thumbs up button using st.markdown (instead of st.button)
with col1:
    if user_input:
        st.markdown(f"""
        <style>
            {button_hover_style}
        </style>
        <div class="custom-btn" style="{button_style}" onclick="window.location.href='/like'">:+1:</div>
        """, unsafe_allow_html=True)

# Custom thumbs down button using st.markdown
with col2:
    if user_input:
        st.markdown(f"""
        <style>
            {button_hover_style}
        </style>
        <div class="custom-btn" style="{button_style}" onclick="window.location.href='/dislike'">:-1:</div>
        """, unsafe_allow_html=True)

# Custom copy to clipboard button (with custom HTML and JS)
with col3:
    if user_input:
        copy_button_html = f"""
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <style>
                .copy-btn {{
                    {button_style}
                }}
                .copy-btn:hover {{
                    border-color: black;
                }}
            </style>
            <button class="copy-btn" onclick="copyFallback()">📋</button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand('copy');
                    alert('Text copied to clipboard!');
                }}
            </script>
        """
        st.components.v1.html(copy_button_html, height=50)

with col4:
    st.write("Other functionality here.")

---------------------
import streamlit as st

# Simulate user input
user_input = st.text_input("Enter something to enable buttons:")

# Content to copy
text_to_copy = "im pooki"

# Define button styles for thumbs up, thumbs down, and copy button
button_style = """
    display: inline-block;
    padding: 10px 20px;
    margin: 0 10px;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1em;
    text-align: center;
    vertical-align: middle;
    height: 38px;
    line-height: 38px;
    box-sizing: border-box;
"""
button_hover_style = """
    .custom-btn:hover {
        border-color: black;
    }
"""

# Create columns for layout
col1, col2, col3, col4 = st.columns([0.5, 0.5, 4, 4])

# Custom thumbs-up button using st.components.v1.html
with col1:
    if user_input:
        thumbs_up_button_html = f"""
        <style>
            {button_hover_style}
        </style>
        <div class="custom-btn" style="{button_style}" onclick="window.alert('You clicked thumbs up!');">:+1:</div>
        """
        st.components.v1.html(thumbs_up_button_html, height=50)

# Custom thumbs-down button using st.components.v1.html
with col2:
    if user_input:
        thumbs_down_button_html = f"""
        <style>
            {button_hover_style}
        </style>
        <div class="custom-btn" style="{button_style}" onclick="window.alert('You clicked thumbs down!');">:-1:</div>
        """
        st.components.v1.html(thumbs_down_button_html, height=50)

# Custom copy to clipboard button
with col3:
    if user_input:
        copy_button_html = f"""
            <input type="text" value="{text_to_copy}" id="textToCopy" style="position: absolute; left: -9999px;">
            <style>
                .copy-btn {{
                    {button_style}
                }}
                .copy-btn:hover {{
                    border-color: black;
                }}
            </style>
            <button class="copy-btn" onclick="copyFallback()">📋</button>

            <script>
                function copyFallback() {{
                    var copyText = document.getElementById("textToCopy");
                    copyText.select();
                    document.execCommand('copy');
                    alert('Text copied to clipboard!');
                }}
            </script>
        """
        st.components.v1.html(copy_button_html, height=50)

with col4:
    st.write("Other functionality here.")


-----------------
copy_button_html = f"""
    <input type="text" value="{text_to_copy}" id="textToCopy" style="display: none;">  <!-- Hidden Input -->

    <style>
        .copy-btn {{
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            padding: 10px 20px;  /* Match padding */
            height: 45px;  /* Match height */
            line-height: 1.5;  /* Match line height */
            display: inline-block;
            vertical-align: middle;
            margin: 0;  /* Match margin */
            box-sizing: border-box;  /* Ensure the border is included in the button size */
        }}
        .copy-btn:hover {{
            border-color: black;
        }}
        .copy-container {{
            display: inline-block;
            vertical-align: middle;
        }}
    </style>

    <div class="copy-container">
        <button class="copy-btn" onclick="copyFallback()">📋</button>
    </div>

    <script>
        function copyFallback() {{
            var copyText = document.getElementById("textToCopy");
            copyText.style.display = 'block';  // Temporarily display input for copy
            copyText.select();
            document.execCommand('copy');
            copyText.style.display = 'none';  // Hide input again
            alert('Text copied to clipboard!');
        }}
    </script>
"""

