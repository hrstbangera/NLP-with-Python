from langchain.retrievers import ParentDocumentRetriever
from langchain.storage import InMemoryStore
from langchain_chroma import Chroma
from langchain_community.document_loaders import TextLoader
from langchain_openai import OpenAIEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter

class DocumentProcessingError(Exception):
    """
    Custom exception class for document processing errors.
    """
    def __init__(self, message: str):
        super().__init__(message)

class DocumentLoaderError(DocumentProcessingError):
    """
    Raised when there is an issue loading documents.
    """
    pass

class VectorStoreError(DocumentProcessingError):
    """
    Raised when there is an issue with the vector store.
    """
    pass

class RetrieverError(DocumentProcessingError):
    """
    Raised when there is an issue adding documents to the retriever.
    """
    pass

try:
    # Load documents
    loaders = [
        TextLoader("paul_graham_essay.txt"),
        TextLoader("state_of_the_union.txt"),
    ]
    docs = []
    for loader in loaders:
        try:
            docs.extend(loader.load())
        except FileNotFoundError as fnf_error:
            raise DocumentLoaderError(f"File not found: {fnf_error}")
        except Exception as e:
            raise DocumentLoaderError(f"Error loading document: {e}")

    if not docs:
        raise DocumentLoaderError("No documents loaded. Please check your file paths.")

    # This text splitter is used to create the child documents
    child_splitter = RecursiveCharacterTextSplitter(chunk_size=400)

    # The vectorstore to use to index the child chunks
    try:
        vectorstore = Chroma(
            collection_name="full_documents", embedding_function=OpenAIEmbeddings()
        )
    except Exception as e:
        raise VectorStoreError(f"Error initializing vector store: {e}")

    # The storage layer for the parent documents
    store = InMemoryStore()

    try:
        retriever = ParentDocumentRetriever(
            vectorstore=vectorstore,
            docstore=store,
            child_splitter=child_splitter,
        )

        # Attempt to add documents
        retriever.add_documents(docs, ids=None)
        print("Documents successfully added to the retriever.")

    except Exception as e:
        raise RetrieverError(f"Error adding documents to retriever: {e}")

except DocumentProcessingError as dpe:
    print(f"DocumentProcessingError: {dpe}")

except Exception as e:
    print(f"An unexpected error occurred: {e}")
